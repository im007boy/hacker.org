// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   Ball.java

import java.awt.*;
import java.awt.image.ImageObserver;
import java.util.Vector;

public class Ball extends ImageMovingActor
{

    private synchronized void addBall(Ball ball)
    {
        LevelConstructor.parseLevel(ball, llIll);
    }

    private synchronized void removeBall(Ball ball)
    {
        DestroyerMovementCalculator.advanceToCollision(ball, llIll);
    }

    public static synchronized void speedBalls()
    {
        $$5$5S55 += DefaultStage.$55;
        $$5$5S55 != FixedActor.I1l;
        DefaultStage.AnimationThread.$5$$55.booleanValue();
        JVM INSTR ifge 31;
           goto _L1 _L2
_L1:
        JVM INSTR pop ;
        break MISSING_BLOCK_LABEL_103;
_L5:
        throw ;
_L2:
        JVM INSTR ifle 94;
           goto _L3 _L4
_L3:
        break MISSING_BLOCK_LABEL_34;
_L4:
        break MISSING_BLOCK_LABEL_40;
        $$5$5S55 = FixedActor.I1l;
        S$S5555 += DefaultStage.$55;
        if(S$S5555 > FixedActor.I1l)
            S$S5555 = FixedActor.I1l;
        for(java.util.Enumeration enumeration = StraightLineMovementCalculator.determineCollision(llIll); BouncingMovementCalculator.moveTemp(enumeration); ((Ball)StraightLineMovementCalculator.move(enumeration)).reapplyMultipliers());
        return;
        null;
          goto _L5
    }

    public static synchronized void resetBallSpeed()
    {
        Bullet.l1l;
        BreakoutGame.DoubleBallBonus.$5SS;
        JVM INSTR ifge 14;
           goto _L1 _L2
_L1:
        JVM INSTR pop ;
        break MISSING_BLOCK_LABEL_54;
_L6:
        throw ;
_L2:
        $$5$5S55;
        java.util.Enumeration enumeration;
        S$S5555 = Bullet.l1l;
        enumeration = StraightLineMovementCalculator.determineCollision(llIll);
          goto _L3
_L5:
        ((Ball)StraightLineMovementCalculator.move(enumeration)).reapplyMultipliers();
_L3:
        if(BouncingMovementCalculator.moveTemp(enumeration)) goto _L5; else goto _L4
_L4:
        return;
        null;
          goto _L6
    }

    public Ball(BreakoutGame breakoutgame, Stage stage, Image image, ImageObserver imageobserver, int i, int j)
    {
        super(stage, image, imageobserver, i, j);
        lI1llI = BonusActor.lll;
        S555$$5 = BonusActor.lll;
        $$$S55 = S$$;
        lIlIl = ImageMovingActor.$5S5;
        S$5$5 = ImageMovingActor.$5S5;
        IlII1 = BonusActor.lll;
        addBall(this);
        setMovementCalculator(new BouncingMovementCalculator());
        Il1l = breakoutgame;
        breakoutgame.ballCreated(this);
    }

    public void die()
    {
        removeBall(this);
        super.die();
        Il1l.ballDied(this);
    }

    public void move()
    {
        long l;
        long l1;
        long l2;
        long l3;
        long l4;
        long l5;
        long l6;
        long l7;
        long l8;
        long l9;
        long l10;
        long l11;
        long l12;
        long l13;
        long l14;
        l14 = S$$;
        l13 = S$$;
        l13 = S$$;
        l12 = S$$;
        l12 = S$$;
        l11 = S$$;
        l11 = S$$;
        l11 = S$$;
        l10 = S$$;
        l10 = S$$;
        l10 = S$$;
        l9 = S$$;
        l8 = S$$;
        l7 = S$$;
        l6 = S$$;
        l6 = S$$;
        l5 = S$$;
        l4 = S$$;
        l4 = S$$;
        l3 = S$$;
        l3 = S$$;
        l = 0xa46494a127e647c6L;
        l1 = 0xebbf28def49eb68fL;
        l2 = 0x70e7bf3b7a4b8e45L;
        $$$S55 = $$$S55 + ImmortalBlock.III;
        l7 = (long)(super.S$$5$ != DefaultStage.AnimationThread.IIl1) & 255L ^ l7 & -256L;
        if((byte)(int)(l7 & 255L) != 0)
        {
            l3 = (long)Block.llI << 62 & 0x4000000000000000L ^ l3 & 0xbfffffffffffffffL;
            break MISSING_BLOCK_LABEL_207;
        }
        l3 = (long)BonusActor.lll << 62 & 0x4000000000000000L ^ l3 & 0xbfffffffffffffffL;
        if((byte)(int)(((long)(super.II11 != DefaultStage.AnimationThread.IIl1) & 255L ^ l12 & -256L) & 255L) != 0)
            l3 = (long)Block.llI << 41 & 0x20000000000L ^ l3 & 0xfffffdffffffffffL;
        else
            l3 = (long)BonusActor.lll << 41 & 0x20000000000L ^ l3 & 0xfffffdffffffffffL;
        l3 = (long)((int)((l3 & 0x4000000000000000L) >> 62) & (int)((l3 & 0x20000000000L) >> 41)) << 44 & 0x100000000000L ^ l3 & 0xffffefffffffffffL;
        if((int)((l3 & 0x100000000000L) >> 44) == 0) goto _L2; else goto _L1
_L1:
        l3 = (long)IlII1 << 63 & 0x8000000000000000L ^ l3 & 0x7fffffffffffffffL;
        if((int)((l3 & 0x8000000000000000L) >> 63) != 0 && (int)(((long)super.S$5$.getIntersections(super.S$S$$$, Block.llI).length & 0xffffffffL ^ l11 & 0xffffffff00000000L) & 0xffffffffL) == 0)
            IlII1 = BonusActor.lll;
        if((int)(((long)lI1llI & 0xffffffffL ^ l14 & 0xffffffff00000000L) & 0xffffffffL) != Block.llI) goto _L4; else goto _L3
_L3:
        l10 = (long)(super.S$$5$ != DefaultStage.AnimationThread.IIl1) & 255L ^ l10 & -256L;
        if((byte)(int)(l10 & 255L) > 0)
            l9 = (long)Block.SSSS << 34 & 0x3fc00000000L ^ l9 & 0xfffffc03ffffffffL;
        else
            l9 = (long)Block.llI << 34 & 0x3fc00000000L ^ l9 & 0xfffffc03ffffffffL;
        l5 = (long)(FixedActor.die(l) != ImageMovingActor.ll1) << 33 & 0x1fe00000000L ^ ((long)(byte)(int)((l9 & 0x3fc00000000L) >> 34) << 51 & 0x7f8000000000000L ^ l5 & 0xf807ffffffffffffL) & 0xfffffe01ffffffffL;
        if((byte)(int)((l5 & 0x1fe00000000L) >> 33) < 0)
            l10 = (long)Block.llI << BreakoutGame.NullBonus.l1IIl & 0x3fc00L ^ l10 & 0xfffffffffffc03ffL;
        else
            l10 = (long)Block.SSSS << BreakoutGame.NullBonus.l1IIl & 0x3fc00L ^ l10 & 0xfffffffffffc03ffL;
        l7 = (long)(byte)(int)((l10 & 0x3fc00L) >> BreakoutGame.NullBonus.l1IIl) << 43 & 0x7f80000000000L ^ l7 & 0xfff807ffffffffffL;
        l3 = (long)tryAndSplit((byte)(int)((l5 & 0x7f8000000000000L) >> 51), (byte)(int)((l7 & 0x7f80000000000L) >> 43)) << 43 & 0x80000000000L ^ l3 & 0xfffff7ffffffffffL;
        if((int)((l3 & 0x80000000000L) >> 43) != 0)
        {
            lI1llI = (int)(((long)((int)(((long)lI1llI & 0xffffffffL ^ l13 & 0xffffffff00000000L) & 0xffffffffL) - Block.llI) & 0xffffffffL ^ l9 & 0xffffffff00000000L) & 0xffffffffL);
        } else
        {
            l3 = (long)tryAndSplit((byte)(int)((l5 & 0x7f8000000000000L) >> 51), (byte)(int)(((long)(-(byte)(int)((l7 & 0x7f80000000000L) >> 43)) & 255L ^ l4 & -256L) & 255L)) << 59 & 0x800000000000000L ^ l3 & 0xf7ffffffffffffffL;
            if((int)((l3 & 0x800000000000000L) >> 59) != 0)
                lI1llI = (int)(((long)((int)(((long)lI1llI & 0xffffffffL ^ l8 & 0xffffffff00000000L) & 0xffffffffL) - Block.llI) & 0xffffffffL ^ l3 & 0xffffffff00000000L) & 0xffffffffL);
        }
          goto _L2
_L4:
        if(lI1llI <= Block.llI) goto _L2; else goto _L5
_L5:
        l6 = (long)(FixedActor.die(l1) != ImageMovingActor.ll1) << BreakoutGame.NullBonus.l1IIl & 0x3fc00L ^ l6 & 0xfffffffffffc03ffL;
        if((byte)(int)((l6 & 0x3fc00L) >> BreakoutGame.NullBonus.l1IIl) < 0)
            l9 = (long)Block.SSSS << 44 & 0xff00000000000L ^ l9 & 0xfff00fffffffffffL;
        else
            l9 = (long)Block.llI << 44 & 0xff00000000000L ^ l9 & 0xfff00fffffffffffL;
        l3 = (long)(byte)(int)((l9 & 0xff00000000000L) >> 44) << 33 & 0x1fe00000000L ^ l3 & 0xfffffe01ffffffffL;
        if((byte)(int)((l3 & 0x1fe00000000L) >> 33) < 0)
            l4 = (long)Block.llI << 52 & 0xff0000000000000L ^ l4 & 0xf00fffffffffffffL;
        else
            l4 = (long)Block.SSSS << 52 & 0xff0000000000000L ^ l4 & 0xf00fffffffffffffL;
        l4 = (long)(byte)(int)((l4 & 0xff0000000000000L) >> 52) << 11 & 0x7f800L ^ l4 & 0xfffffffffff807ffL;
        l7 = (long)(byte)(int)((l3 & 0x1fe00000000L) >> 33) << 9 & 0x1fffffffe00L ^ l7 & 0xfffffe00000001ffL;
          goto _L6
_L12:
        int i;
        l6 = (long)(FixedActor.die(l2) != ImageMovingActor.ll1) & 255L ^ l6 & -256L;
        if((byte)(int)(l6 & 255L) < 0)
            l5 = (long)Block.SSSS << 42 & 0x3fc0000000000L ^ l5 & 0xfffc03ffffffffffL;
        else
            l5 = (long)Block.llI << 42 & 0x3fc0000000000L ^ l5 & 0xfffc03ffffffffffL;
        l6 = (long)(byte)(int)((l5 & 0x3fc0000000000L) >> 42) << 18 & 0x3fc0000L ^ l6 & 0xfffffffffc03ffffL;
        if((byte)(int)((l3 & 0x1fe00000000L) >> 33) < 0)
            l3 = (long)Block.llI << 48 & 0xff000000000000L ^ l3 & 0xff00ffffffffffffL;
        else
            l3 = (long)Block.SSSS << 48 & 0xff000000000000L ^ l3 & 0xff00ffffffffffffL;
        l9 = (long)(byte)(int)((l3 & 0xff000000000000L) >> 48) << 55 & 0x7f80000000000000L ^ l9 & 0x807fffffffffffffL;
        i = (byte)(int)((l6 & 0x3fc0000L) >> 18);
          goto _L7
_L11:
        l4 = (long)lI1llI << 19 & 0x7fffffff80000L ^ l4 & 0xfff800000007ffffL;
        if((int)((l4 & 0x7fffffff80000L) >> 19) <= 0)
            continue; /* Loop/switch isn't completed */
        l3 = (long)tryAndSplit((int)((l7 & 0x1fffffffe00L) >> 9), i) << ImageFixedActor.$S$S & 0x800000000000L ^ l3 & 0xffff7fffffffffffL;
        if((int)((l3 & 0x800000000000L) >> ImageFixedActor.$S$S) == 0)
            continue; /* Loop/switch isn't completed */
        l5 = (long)lI1llI & 0xffffffffL ^ l5 & 0xffffffff00000000L;
        l10 = (long)((int)(l5 & 0xffffffffL) - Block.llI) << MovingResults.I1I1 & 0xffffffff00000L ^ l10 & 0xfff00000000fffffL;
        this;
        BreakoutGame.$$SS5;
        JVM INSTR ifge 1461;
           goto _L8 _L9
_L8:
        JVM INSTR pop ;
        break MISSING_BLOCK_LABEL_1717;
_L13:
        throw ;
_L9:
        (int)((l10 & 0xffffffff00000L) >> MovingResults.I1I1);
        lI1llI;
        $$$S55 = S$$;
        i++;
_L7:
        if(i <= (byte)(int)((l9 & 0x7f80000000000000L) >> 55)) goto _L11; else goto _L10
_L10:
        l7 = (long)(Block.llI + (int)((l7 & 0x1fffffffe00L) >> 9)) << 9 ^ l7 & 0xfffffe00000001ffL;
_L6:
        if((int)((l7 & 0x1fffffffe00L) >> 9) <= (byte)(int)((l4 & 0x7f800L) >> 11)) goto _L12; else goto _L2
_L2:
        super.move();
        if((byte)(int)((((long)(super.S$$5$ * lIlIl != DefaultStage.AnimationThread.IIl1) << 54 & 0x3fc0000000000000L ^ l7 & 0xc03fffffffffffffL) & 0x3fc0000000000000L) >> 54) < 0)
            lIlIl = -lIlIl;
        if((byte)(int)((((long)(super.II11 * S$5$5 != DefaultStage.AnimationThread.IIl1) << 54 & 0x3fc0000000000000L ^ l10 & 0xc03fffffffffffffL) & 0x3fc0000000000000L) >> 54) < 0)
            S$5$5 = -S$5$5;
        return;
        null;
          goto _L13
    }

    public int collisionVector()
    {
        BreakoutGame.NullBonus.llllI;
        JVM INSTR ifge 8;
           goto _L1 _L2
_L1:
        break MISSING_BLOCK_LABEL_6;
_L2:
        break MISSING_BLOCK_LABEL_8;
        null;
        throw ;
        if(IlII1)
            return BonusActor.lll;
        return Block.llI;
    }

    public void setXMultiplier(float f)
    {
        lIlIl = f;
        setDx(lIlIl * $$5$5S55);
    }

    public void setYMultiplier(float f)
    {
        S$5$5 = f;
        setDy(S$5$5 * S$S5555);
    }

    private void reapplyMultipliers()
    {
        setDy(S$5$5 * S$S5555);
        setDx(lIlIl * S$S5555);
    }

    private boolean tryAndSplit(int i, int j)
    {
        float f;
        long l;
        long l1;
        long l2;
        long l3;
        long l4;
        long l5;
        long l6;
        long l7;
        long l8;
        long l9;
        long l10;
        long l11;
        long l12;
        long l13;
        l13 = S$$;
        l12 = S$$;
        l12 = S$$;
        l12 = S$$;
        l12 = S$$;
        l11 = S$$;
        l11 = S$$;
        l10 = S$$;
        l10 = S$$;
        l10 = S$$;
        l10 = S$$;
        l10 = S$$;
        l10 = S$$;
        l10 = S$$;
        l10 = S$$;
        l10 = S$$;
        l9 = S$$;
        l9 = S$$;
        l9 = S$$;
        l9 = S$$;
        l9 = S$$;
        l8 = S$$;
        l7 = S$$;
        l7 = S$$;
        l7 = S$$;
        l7 = S$$;
        l7 = S$$;
        l7 = S$$;
        l7 = S$$;
        l6 = S$$;
        l = 0xbb6e43e2051f1226L;
        l1 = 0x11e912dacf86299fL;
        l2 = 0xe385dc934d6698cL;
        l3 = 0x1f30929ce4287065L;
        l4 = 0x6c6d657dcbfd5df9L;
        l5 = 0xb0fdd660aa643a3L;
        l10 = (long)super.S$S$$$.width & 0xffffffffL ^ S$$ & 0xffffffff00000000L;
        l6 = (long)super.S$S$$$.height & 0xffffffffL ^ S$$ & 0xffffffff00000000L;
        l11 = (long)BonusActor.lll & 0xffffffffL ^ S$$ & 0xffffffff00000000L;
        f = DefaultStage.AnimationThread.IIl1;
        i;
        JVM INSTR tableswitch -1 1: default 441
    //                   -1 272
    //                   0 338
    //                   1 377;
           goto _L1 _L2 _L3 _L4
_L2:
        l11 = (long)((int)(((long)super.S$S$$$.x & 0xffffffffL ^ l13 & 0xffffffff00000000L) & 0xffffffffL) - (int)(l10 & 0xffffffffL)) & 0xffffffffL ^ l11 & 0xffffffff00000000L;
        f = (float)FixedActor.die(l) * BreakoutApplet.$$S;
        f = BreakoutGame.SlowBallBonus.$$5S - f;
        break MISSING_BLOCK_LABEL_468;
_L3:
        l11 = (long)super.S$S$$$.x & 0xffffffffL ^ l11 & 0xffffffff00000000L;
        f = (float)FixedActor.die(l1) * BreakoutApplet.$$S + ImageMovingActor.$5S5;
        break MISSING_BLOCK_LABEL_468;
_L4:
        l11 = (long)((int)(((long)super.S$S$$$.x & 0xffffffffL ^ l12 & 0xffffffff00000000L) & 0xffffffffL) + (int)(l10 & 0xffffffffL)) & 0xffffffffL ^ l11 & 0xffffffff00000000L;
        f = (float)FixedActor.die(l2) * BreakoutApplet.$$S + ImageMovingActor.$5S5;
        break MISSING_BLOCK_LABEL_468;
_L1:
        java.io.PrintStream printstream = System.out;
        ActorArray.ActorIterator.hasNext(Border.collisionVector(ImageMovingActor.draw(i, new StringBuffer(Bullet.S$$$))), printstream);
        l9 = (long)BonusActor.lll & 0xffffffffL ^ l9 & 0xffffffff00000000L;
        i = DefaultStage.AnimationThread.IIl1;
        j;
        JVM INSTR tableswitch -1 1: default 685
    //                   -1 516
    //                   0 563
    //                   1 602;
           goto _L5 _L6 _L7 _L8
_L6:
        l9 = (long)(super.S$S$$$.y - (int)(l6 & 0xffffffffL)) & 0xffffffffL ^ l9 & 0xffffffff00000000L;
        i = (float)FixedActor.die(l3) * $S5 + ImageMovingActor.$5S5;
          goto _L9
_L7:
        l9 = (long)super.S$S$$$.y & 0xffffffffL ^ l9 & 0xffffffff00000000L;
        i = (float)FixedActor.die(l4) * $S5 + ImageMovingActor.$5S5;
          goto _L9
_L8:
        this;
        if((byte)0x7bedbdca % 9 == 0) goto _L11; else goto _L10
_L10:
        JVM INSTR pop ;
          goto _L12
_L13:
        throw ;
_L11:
        S$S$$$;
        y;
        (long);
        0xffffffffL;
        JVM INSTR land ;
        l8 & 0xffffffff00000000L;
        JVM INSTR lxor ;
        0xffffffffL;
        JVM INSTR land ;
        (int);
        (int)(l6 & 0xffffffffL);
        JVM INSTR iadd ;
        (long);
        0xffffffffL;
        JVM INSTR land ;
        l9 & 0xffffffff00000000L;
        JVM INSTR lxor ;
        l9;
        float f1 = (float)FixedActor.die(l5) * $S5;
        i = BreakoutGame.SlowBallBonus.$$5S - f1;
          goto _L9
_L5:
        java.io.PrintStream printstream1 = System.out;
        ActorArray.ActorIterator.hasNext(Border.collisionVector(ImageMovingActor.draw(j, new StringBuffer(DefaultStage.$SS$))), printstream1);
_L9:
        j = new Rectangle((int)(l11 & 0xffffffffL), (int)(l9 & 0xffffffffL), (int)(l10 & 0xffffffffL), (int)(l6 & 0xffffffffL));
        if((int)(((long)super.S$5$.getIntersections(j, collisionVector()).length & 0xffffffffL ^ l7 & 0xffffffff00000000L) & 0xffffffffL) == 0)
        {
            j = new Ball(Il1l, super.S$5$, super.llI1I, super.Illll, (int)(l11 & 0xffffffffL), (int)(l9 & 0xffffffffL));
            j.setXMultiplier(f);
            j.setYMultiplier(i);
            super.S$5$.add(j);
            return Block.llI;
        }
        return BonusActor.lll;
_L12:
        null;
          goto _L13
    }

    public void split()
    {
        $$$S55;
        if((byte)0x2a342551 % Paddle.S5S == 0) goto _L2; else goto _L1
_L1:
        JVM INSTR pop2 ;
        break MISSING_BLOCK_LABEL_37;
_L5:
        throw ;
_L2:
        DefaultStage.$SS;
        JVM INSTR lcmp ;
        JVM INSTR ifle 34;
           goto _L3 _L4
_L3:
        break MISSING_BLOCK_LABEL_26;
_L4:
        break MISSING_BLOCK_LABEL_33;
        lI1llI = Block.llI;
        return;
        null;
          goto _L5
    }

    public void forceSplit()
    {
        $$$S55 != DefaultStage.ClockThread.lll1;
        ActorArray.ActorIterator.SS5S$5;
        JVM INSTR ifge 19;
           goto _L1 _L2
_L1:
        JVM INSTR pop ;
        break MISSING_BLOCK_LABEL_33;
_L5:
        throw ;
_L2:
        JVM INSTR ifle 30;
           goto _L3 _L4
_L3:
        break MISSING_BLOCK_LABEL_22;
_L4:
        break MISSING_BLOCK_LABEL_29;
        lI1llI = Block.llI;
        return;
        null;
          goto _L5
    }

    public void triple()
    {
        lI1llI = BreakoutGame.S$55;
    }

    public void setDestroyer(boolean flag)
    {
        if(flag == S555$$5) goto _L2; else goto _L1
_L1:
        S555$$5 = flag;
        if(!flag) goto _L4; else goto _L3
_L3:
        this;
        new DestroyerMovementCalculator();
        BreakoutApplet.II1I.booleanValue();
        JVM INSTR ifge 39;
           goto _L5 _L6
_L5:
        JVM INSTR pop ;
          goto _L7
_L8:
        throw ;
_L6:
        setMovementCalculator();
          goto _L2
_L4:
        setMovementCalculator(new BouncingMovementCalculator());
_L2:
        return;
_L7:
        JVM INSTR pop ;
        null;
          goto _L8
    }

    public boolean isDestroyer()
    {
        return S555$$5;
    }

    public void setHeld(boolean flag)
    {
        if(!flag) goto _L2; else goto _L1
_L1:
        setYMultiplier(DefaultStage.AnimationThread.IIl1);
        setXMultiplier(DefaultStage.AnimationThread.IIl1);
        this;
        if((byte)0x514c1748 % 9 == 0) goto _L4; else goto _L3
_L3:
        JVM INSTR pop ;
        break MISSING_BLOCK_LABEL_76;
_L6:
        throw ;
_L4:
        Block.llI;
        IlII1;
          goto _L5
_L2:
        if(super.S$5$.getIntersections(super.S$S$$$, Block.llI).length == 0)
            IlII1 = BonusActor.lll;
_L5:
        return;
        null;
          goto _L6
    }

    public static void setHeld(int i, int j, int k, int l, Graphics g)
    {
        g.clearRect(i, j, k, l);
    }

    public static final void removeBall(Object obj)
    {
        obj.wait();
    }

    public static boolean addBall(Object obj, String s)
    {
        return s.equals(obj);
    }

    public static boolean tryAndSplit(char c)
    {
        return Character.isLetter(c);
    }

    public static void resetBallSpeed(float f)
    {
        System.gc();
    }

    private static final float IlIIl = 1.08213E+09F;
    private static final float $$S$S5 = 1.08213E+09F;
    private static final float $S5$S = 1.075839E+09F;
    private static final float S$S55S = 1.075839E+09F;
    private static final float l1Il1l = 1.028443E+09F;
    private static Vector llIll = new Vector();
    private static float $$5$5S55 = 2.5F;
    private static float S$S5555 = 2.5F;
    private BreakoutGame Il1l;
    private int lI1llI;
    private boolean S555$$5;
    private long $$$S55;
    private float lIlIl;
    private float S$5$5;
    private boolean IlII1;
    public static long S$$;
    public static float $S5 = 0.15F;
    public static String ______ = "bonus.jpg";
    public static int IlI1II = 37;
    public static boolean SS555S$ = true;
    public static Boolean Il11l = new Boolean(false);

}
