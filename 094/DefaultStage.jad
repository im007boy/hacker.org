// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   DefaultStage.java

import java.awt.*;
import java.util.Vector;

public class DefaultStage extends Panel
    implements Stage
{
    class AnimationThread extends Thread
    {

        public void stopThread()
        {
            if(SS55$ == null)
                break MISSING_BLOCK_LABEL_31;
            SS55$.stopThread();
            SS55$ = null;
            if((byte)0x1f7187a6 % 9 == 0)
                break MISSING_BLOCK_LABEL_31;
            null;
            throw ;
            if(l1ll)
                l1ll = BonusActor.lll;
            return;
        }

        public synchronized void run()
        {
            ClockThread clockthread;
            Object obj2;
            Paddle paddle;
            long l1;
            long l2;
            long l3;
            long l4;
            long l5;
            long l6;
            long l7;
            int j = BonusActor.lll;
            l7 = Ball.S$$;
            l6 = Ball.S$$;
            l6 = Ball.S$$;
            l6 = Ball.S$$;
            l6 = Ball.S$$;
            l6 = Ball.S$$;
            l5 = Ball.S$$;
            l5 = Ball.S$$;
            l4 = Ball.S$$;
            l4 = Ball.S$$;
            l4 = Ball.S$$;
            l4 = Ball.S$$;
            l4 = Ball.S$$;
            l3 = Ball.S$$;
            l3 = Ball.S$$;
            l3 = Ball.S$$;
            l3 = Ball.S$$;
            l3 = Ball.S$$;
            l3 = Ball.S$$;
            l2 = Ball.S$$;
            l1 = Ball.S$$;
            obj2 = (Paddle)null;
            paddle = (Paddle)null;
            SS55$ = llll. new ClockThread(this);
            KillingFloor.hit(BreakoutGame.NullBonus.l1IIl, this);
            clockthread = SS55$;
            l7 = (long)FixedActor.move(this) & 0xffffffffL ^ l7 & 0xffffffff00000000L;
            l6 = (long)((int)(l7 & 0xffffffffL) - Block.llI) & 0xffffffffL ^ l6 & 0xffffffff00000000L;
            Paddle.I1lII;
            JVM INSTR ifge 202;
               goto _L1 _L2
_L1:
            break MISSING_BLOCK_LABEL_200;
_L2:
            break MISSING_BLOCK_LABEL_202;
            null;
            throw ;
            KillingFloor.hit((int)(l6 & 0xffffffffL), clockthread);
            ((DefaultStage) (SS55$)).SS5S;
            l6 = (long)BonusActor.lll << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l6 & 0xffffffffL;
            ActorArray.ActorIterator.reset(((Paddle) (obj2)));
              goto _L3
_L6:
            l6 = (long)(Block.llI + (int)((l6 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)) << BreakoutGame.DoubleBallBonus.$55$ ^ l6 & 0xffffffffL;
            if((int)((l6 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) != BreakoutGame.DestroyerBonus.IlII)
                break MISSING_BLOCK_LABEL_324;
            long l = ActorArray.ActorIterator.reset(paddle);
            l6 = (long)BonusActor.lll << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l6 & 0xffffffffL;
            DefaultStage defaultstage = llll;
            JVM INSTR monitorenter ;
            Object obj = llll.SS5S.getSharedIterator();
            while((int)(((l2 = (long)((ActorArray.ActorIterator) (obj)).hasNext() << Ball.IlI1II & 0x2000000000L ^ l2 & 0xffffffdfffffffffL) & 0x2000000000L) >> Ball.IlI1II) != 0) 
            {
                Actor actor = ((ActorArray.ActorIterator) (obj)).next();
                l1 = (long)actor.isBackground() << 62 & 0x4000000000000000L ^ l1 & 0xbfffffffffffffffL;
                if((int)((l1 & 0x4000000000000000L) >> 62) != 0)
                    llll.II1l.add(actor);
                else
                    llll.S5$$.add(actor);
            }
            llll.SS5S.clear();
            if(llll.$S$$55.update() != 0)
            {
                java.util.Enumeration enumeration = StraightLineMovementCalculator.determineCollision((Vector)ImageFixedActor.draw(llll.$S$$55));
                while((int)(((l1 = (long)BouncingMovementCalculator.moveTemp(enumeration) << BreakoutGame.LifeBonus.S55$ & 128L ^ l1 & -129L) & 128L) >> BreakoutGame.LifeBonus.S55$) != 0) 
                    ((TickListener)StraightLineMovementCalculator.move(enumeration)).tick();
            }
            Object obj1 = llll.S5$$.getSharedIterator();
            while((int)(((l1 = (long)((ActorArray.ActorIterator) (obj1)).hasNext() << 63 & 0x8000000000000000L ^ l1 & 0x7fffffffffffffffL) & 0x8000000000000000L) >> 63) != 0) 
            {
                Actor actor1 = ((ActorArray.ActorIterator) (obj1)).next();
                l1 = (long)actor1.isAlive() << 11 & 2048L ^ l1 & -2049L;
                if((int)((l1 & 2048L) >> 11) != 0)
                    actor1.move();
            }
            ActorArray actorarray = llll.S5$$.removeDead();
            obj = new Vector(BreakoutGame.NullBonus.l1IIl);
            obj1 = new ActorArray(BreakoutGame.NullBonus.l1IIl);
            ActorArray.ActorIterator actoriterator = llll.II1l.removeDead().getSharedIterator();
            while((int)(((l1 = (long)actoriterator.hasNext() << 61 & 0x2000000000000000L ^ l1 & 0xdfffffffffffffffL) & 0x2000000000000000L) >> 61) != 0) 
                LevelConstructor.parseLevel(actoriterator.next().getDirtyRectangle(), ((Vector) (obj)));
            actoriterator = actorarray.getSharedIterator();
            while((int)(((l2 = (long)actoriterator.hasNext() << 41 & 0x20000000000L ^ l2 & 0xfffffdffffffffffL) & 0x20000000000L) >> 41) != 0) 
                LevelConstructor.parseLevel(actoriterator.next().getDirtyRectangle(), ((Vector) (obj)));
            actoriterator = llll.S5$$.getSharedIterator();
            while((int)(((l1 = (long)actoriterator.hasNext() << 57 & 0x200000000000000L ^ l1 & 0xfdffffffffffffffL) & 0x200000000000000L) >> 57) != 0) 
            {
                Actor actor2 = actoriterator.next();
                l1 = (long)actor2.hasDirty() << 55 & 0x80000000000000L ^ l1 & 0xff7fffffffffffffL;
                if((int)((l1 & 0x80000000000000L) >> 55) != 0)
                {
                    LevelConstructor.parseLevel(actor2.getDirtyRectangle(), ((Vector) (obj)));
                    ((ActorArray) (obj1)).add(actor2);
                }
            }
            actoriterator = llll.II1l.getSharedIterator();
            while((int)(((l1 = (long)actoriterator.hasNext() << BreakoutGame.TripleBonus.l1l1 & 16L ^ l1 & -17L) & 16L) >> BreakoutGame.TripleBonus.l1l1) != 0) 
            {
                obj2 = actoriterator.next();
                l1 = (long)((Actor) (obj2)).hasDirty() << LevelConstructor.S$$S & 32768L ^ l1 & -32769L;
                if((int)((l1 & 32768L) >> LevelConstructor.S$$S) != 0)
                {
                    LevelConstructor.parseLevel(((Actor) (obj2)).getDirtyRectangle(), ((Vector) (obj)));
                    ((ActorArray) (obj1)).add(((Actor) (obj2)));
                    ((Actor) (obj2)).move();
                } else
                {
                    l1 = (long)((DefaultStage) (obj)).update() << 18 & 0x3fffffffc0000L ^ l1 & 0xfffc00000003ffffL;
                    for(int i = BonusActor.lll; i < (int)((l1 & 0x3fffffffc0000L) >> 18); i++)
                    {
                        l1 = (long)((Actor) (obj2)).intersects((Rectangle)BreakoutGame.topBounce(i, ((Vector) (obj)))) << Paddle.S5S & 8L ^ l1 & -9L;
                        if((int)((l1 & 8L) >> Paddle.S5S) != 0)
                        {
                            LevelConstructor.parseLevel(((Actor) (obj2)).getBounds(), ((Vector) (obj)));
                            ((ActorArray) (obj1)).add(((Actor) (obj2)));
                        }
                    }

                }
            }
            for(l7 = (long)BonusActor.lll << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l7 & 0xffffffffL; (int)((l7 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) < (int)((l4 = (long)((DefaultStage) (obj)).update() & 0xffffffffL ^ l4 & 0xffffffff00000000L) & 0xffffffffL); l7 = (long)(Block.llI + (int)((l7 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)) << BreakoutGame.DoubleBallBonus.$55$ ^ l7 & 0xffffffffL)
            {
                obj2 = (Rectangle)BreakoutGame.topBounce((int)((l7 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$), ((Vector) (obj)));
                Graphics g = llll.S$$5;
                l2 = (long)((Rectangle) (obj2)).x & 0xffffffffL ^ l2 & 0xffffffff00000000L;
                l3 = (long)((Rectangle) (obj2)).width & 0xffffffffL ^ l3 & 0xffffffff00000000L;
                l5 = (long)((Rectangle) (obj2)).height << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ ((long)((Rectangle) (obj2)).y & 0xffffffffL ^ l5 & 0xffffffff00000000L) & 0xffffffffL;
                Ball.setHeld((int)(l2 & 0xffffffffL), (int)(l5 & 0xffffffffL), (int)(l3 & 0xffffffffL), (int)((l5 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$), g);
            }

            ((ActorArray) (obj1)).sort();
            obj2 = ((ActorArray) (obj1)).getSharedIterator();
            while((int)(((l2 = (long)((ActorArray.ActorIterator) (obj2)).hasNext() << 34 & 0x400000000L ^ l2 & 0xfffffffbffffffffL) & 0x400000000L) >> 34) != 0) 
                ((ActorArray.ActorIterator) (obj2)).next().draw(llll.S$$5);
            l1 = (long)l1ll & ImmortalBlock.III ^ l1 & -2L;
            if((int)(l1 & ImmortalBlock.III) != 0)
                llll.update(((Vector) (obj)));
              goto _L4
            Throwable throwable;
            throwable;
            defaultstage;
            JVM INSTR monitorexit ;
            throw throwable;
_L7:
            int k;
            if(k != 0)
                break MISSING_BLOCK_LABEL_1547;
            JVM INSTR pop ;
            if(BreakoutApplet.II1I.booleanValue() != MovingResults.$$$$.booleanValue())
                k += 3;
            l1 = (long)l1ll << 58 & 0x400000000000000L ^ l1 & 0xfbffffffffffffffL;
            if((int)((l1 & 0x400000000000000L) >> 58) != 0)
                Ball.removeBall(this);
            continue; /* Loop/switch isn't completed */
            throwable;
            l1 = (long)l1ll << 9 & 512L ^ l1 & -513L;
            if((int)((l1 & 512L) >> 9) != 0)
                ActorArray.ActorIterator.hasNext(ImageFixedActor.l11, System.out);
_L3:
            if((int)(((l1 = (long)l1ll << 53 & 0x20000000000000L ^ l1 & 0xffdfffffffffffffL) & 0x20000000000000L) >> 53) != 0) goto _L6; else goto _L5
_L5:
            return;
_L4:
            k = BonusActor.lll;
            null;
              goto _L7
        }

        private boolean l1ll;
        private ClockThread SS55$;
        final DefaultStage llll; /* synthetic field */
        public static float IIl1;
        public static String II1 = "passed";
        public static boolean ll1IIIl = true;
        public static Boolean $5$$55 = new Boolean(false);


        AnimationThread()
        {
            l1ll = Block.llI;
        }
    }

    class ClockThread extends Thread
    {

        public void stopThread()
        {
            if(!l1ll)
                break MISSING_BLOCK_LABEL_25;
            l1ll = BonusActor.lll;
            if((byte)0x6d7aeef7 % 9 == 0)
                break MISSING_BLOCK_LABEL_25;
            null;
            throw ;
        }

        public void run()
        {
            int i = BonusActor.lll;
              goto _L1
_L6:
            if(i != 0) goto _L3; else goto _L2
_L2:
            JVM INSTR pop ;
            if(BouncingMovementCalculator.S5$S$$ != BreakoutGame.LifeBonus.$5$$.booleanValue())
                i++;
            BonusActor.collisionVector(DefaultStage.SS$5);
            AnimationThread animationthread = $$55$;
            JVM INSTR monitorenter ;
            KillingFloor.hit($$55$);
              goto _L1
            Throwable throwable1;
            throwable1;
            animationthread;
            JVM INSTR monitorexit ;
            throw throwable1;
_L3:
            AnimationThread animationthread1;
            animationthread1;
            ImageFixedActor.l1l1l.booleanValue();
            JVM INSTR ifge 70;
               goto _L4 _L5
_L4:
            break MISSING_BLOCK_LABEL_68;
_L5:
            break MISSING_BLOCK_LABEL_70;
            null;
            throw ;
            l1ll = BonusActor.lll;
_L1:
            if(l1ll)
                break MISSING_BLOCK_LABEL_113;
            animationthread1 = $$55$;
            JVM INSTR monitorenter ;
            KillingFloor.hit($$55$);
            break MISSING_BLOCK_LABEL_108;
            Throwable throwable;
            throwable;
            animationthread1;
            JVM INSTR monitorexit ;
            throw throwable;
            return;
            i = BonusActor.lll;
            null;
              goto _L6
        }

        AnimationThread $$55$;
        private boolean l1ll;
        final DefaultStage llll; /* synthetic field */
        public static long lll1 = 3L;
        public static String SSS = "Destroyer Ball";
        public static Boolean $5SSS = new Boolean(true);
        public static boolean l1Ill1;


        ClockThread(AnimationThread animationthread)
        {
            l1ll = Block.llI;
            $$55$ = animationthread;
            KillingFloor.hit(FixedActor.move(this) + Block.llI, this);
        }
    }


    public DefaultStage()
    {
        long l12 = Ball.S$$;
        long l11 = Ball.S$$;
        l11 = Ball.S$$;
        l11 = Ball.S$$;
        l11 = Ball.S$$;
        l11 = Ball.S$$;
        l11 = Ball.S$$;
        l11 = Ball.S$$;
        l11 = Ball.S$$;
        l11 = Ball.S$$;
        l11 = Ball.S$$;
        long l10 = Ball.S$$;
        long l9 = Ball.S$$;
        l9 = Ball.S$$;
        l9 = Ball.S$$;
        l9 = Ball.S$$;
        l9 = Ball.S$$;
        long l8 = Ball.S$$;
        long l7 = Ball.S$$;
        l7 = Ball.S$$;
        l7 = Ball.S$$;
        long l6 = Ball.S$$;
        l6 = Ball.S$$;
        long l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        long l4 = Ball.S$$;
        l4 = Ball.S$$;
        l4 = Ball.S$$;
        l4 = Ball.S$$;
        long l3 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        long l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        long l1 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        long l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        super();
        S5$$ = new ActorArray();
        II1l = new ActorArray();
        SS5S = new ActorArray();
        $S$$55 = new Vector();
        IIIl = new char[BreakoutGame.BallSplitterBonus.S5SS];
        ActorArray.ActorIterator.reset(Color.black, this);
        l5 = (long)BonusActor.lll & 0xffffffffL ^ l5 & 0xffffffff00000000L;
        l10 = (long)((int)(l5 & 0xffffffffL) + Block.llI) & 0xffffffffL ^ l10 & 0xffffffff00000000L;
        IIIl[(int)(l5 & 0xffffffffL)] = 'T';
        IIIl[(int)(l10 & 0xffffffffL)] = 'h';
        long l13 = (long)((int)(l10 & 0xffffffffL) + Block.llI) & 0xffffffffL ^ l11 & 0xffffffff00000000L;
        l7 = (long)((int)(l13 & 0xffffffffL) + Block.llI) & 0xffffffffL ^ l7 & 0xffffffff00000000L;
        IIIl[(int)(l13 & 0xffffffffL)] = 'e';
        IIIl[(int)(l7 & 0xffffffffL)] = BreakoutGame.DoubleBallBonus.$55$;
        IIIl[(int)((l1 = (long)((int)(l7 & 0xffffffffL) + Block.llI) & 0xffffffffL ^ l1 & 0xffffffff00000000L) & 0xffffffffL)] = BreakoutGame.LifeBonus.$$$S;
        IIIl[(int)(((l10 = (long)((int)(l1 & 0xffffffffL) + Block.llI) << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l10 & 0xffffffffL) & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)] = 'n';
        int i;
        IIIl[i = (int)((l10 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) + Block.llI] = 's';
        long l14 = (long)(i + Block.llI) << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l7 & 0xffffffffL;
        l4 = (long)((int)((l14 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) + Block.llI) << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l4 & 0xffffffffL;
        IIIl[(int)((l14 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)] = 'w';
        IIIl[(int)((l4 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)] = 'e';
        IIIl[(int)((l9 = (long)((int)((l4 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) + Block.llI) & 0xffffffffL ^ l9 & 0xffffffff00000000L) & 0xffffffffL)] = 'r';
        IIIl[(int)((l12 = (long)((int)(l9 & 0xffffffffL) + Block.llI) & 0xffffffffL ^ l12 & 0xffffffff00000000L) & 0xffffffffL)] = BreakoutGame.DoubleBallBonus.$55$;
        IIIl[(int)((l6 = (long)((int)(l12 & 0xffffffffL) + Block.llI) & 0xffffffffL ^ l6 & 0xffffffff00000000L) & 0xffffffffL)] = 'i';
        IIIl[(int)((l3 = (long)((int)(l6 & 0xffffffffL) + Block.llI) & 0xffffffffL ^ l3 & 0xffffffff00000000L) & 0xffffffffL)] = 's';
        IIIl[(int)((l2 = (long)((int)(l3 & 0xffffffffL) + Block.llI) & 0xffffffffL ^ l2 & 0xffffffff00000000L) & 0xffffffffL)] = ':';
        IIIl[(int)((l8 = (long)((int)(l2 & 0xffffffffL) + Block.llI) & 0xffffffffL ^ l8 & 0xffffffff00000000L) & 0xffffffffL)] = BreakoutGame.DoubleBallBonus.$55$;
        int j = (int)(l8 & 0xffffffffL) + Block.llI;
        l4 = (long)(j + Block.llI) & 0xffffffffL ^ l4 & 0xffffffff00000000L;
        IIIl[j] = StraightLineMovementCalculator.llIl;
    }

    public Actor[] getIntersections(Rectangle rectangle, int i)
    {
        ActorArray actorarray;
        ActorArray.ActorIterator actoriterator;
        long l;
        long l1;
        long l2;
        long l3;
        l3 = Ball.S$$;
        l2 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        actorarray = new ActorArray();
        actoriterator = S5$$.iterator();
          goto _L1
_L5:
        actoriterator.next();
        l = (long)actoriterator.current().isAlive() << 42 & 0x40000000000L ^ l & 0xfffffbffffffffffL;
        if((int)((l & 0x40000000000L) >> 42) == 0)
            continue; /* Loop/switch isn't completed */
        l = (long)actoriterator.current().intersects(rectangle) << 52 & 0x10000000000000L ^ l & 0xffefffffffffffffL;
        if((int)((l & 0x10000000000000L) >> 52) == 0)
            continue; /* Loop/switch isn't completed */
        l3 = (long)actoriterator.current().collisionVector() & 0xffffffffL ^ l3 & 0xffffffff00000000L;
        l2 = (long)((int)(l3 & 0xffffffffL) & i) & 0xffffffffL ^ l2 & 0xffffffff00000000L;
        ClockThread.l1Ill1;
        JVM INSTR ifge 232;
           goto _L2 _L3
_L2:
        break MISSING_BLOCK_LABEL_230;
_L3:
        break MISSING_BLOCK_LABEL_232;
        null;
        throw ;
        if((int)(l2 & 0xffffffffL) != 0)
            actorarray.add(actoriterator.current());
_L1:
        if((int)((l = (long)actoriterator.hasNext() & ImmortalBlock.III ^ l & -2L) & ImmortalBlock.III) != 0) goto _L5; else goto _L4
_L4:
        ActorArray.ActorIterator actoriterator1 = II1l.iterator();
        while((int)(((l = (long)actoriterator1.hasNext() << StraightLineMovementCalculator.S5$ & 64L ^ l & -65L) & 64L) >> StraightLineMovementCalculator.S5$) != 0) 
        {
            l = (long)actoriterator1.next().intersects(rectangle) << 49 & 0x2000000000000L ^ l & 0xfffdffffffffffffL;
            if((int)((l & 0x2000000000000L) >> 49) != 0)
            {
                l1 = (long)actoriterator1.current().collisionVector() & 0xffffffffL ^ l1 & 0xffffffff00000000L;
                if(((int)(l1 & 0xffffffffL) & i) != 0)
                    actorarray.add(actoriterator1.current());
            }
        }
        l = (long)SS5S.size() << BreakoutGame.LifeBonus.S55$ & 0x7fffffff80L ^ l & 0xffffff800000007fL;
        if((int)((l & 0x7fffffff80L) >> BreakoutGame.LifeBonus.S55$) != 0)
        {
            ActorArray.ActorIterator actoriterator2 = SS5S.iterator();
            while((int)(((l = (long)actoriterator2.hasNext() << BreakoutGame.TripleBonus.l1l1 & 16L ^ l & -17L) & 16L) >> BreakoutGame.TripleBonus.l1l1) != 0) 
            {
                l = (long)actoriterator2.next().intersects(rectangle) << 46 & 0x400000000000L ^ l & 0xffffbfffffffffffL;
                if((int)((l & 0x400000000000L) >> 46) != 0)
                {
                    l3 = (long)actoriterator2.current().collisionVector() << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l3 & 0xffffffffL;
                    if(((int)((l3 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) & i) != 0)
                        actorarray.add(actoriterator2.current());
                }
            }
        }
        return actorarray.contents();
    }

    public Rectangle getStageBounds()
    {
        return Border.hit(this);
    }

    public synchronized void add(Actor actor)
    {
        SS5S.add(actor);
    }

    public synchronized void clear()
    {
        for(ActorArray.ActorIterator actoriterator = S5$$.iterator(); actoriterator.hasNext();)
            if(actoriterator.next().isAlive())
                actoriterator.current().die();

        for(ActorArray.ActorIterator actoriterator1 = II1l.iterator(); actoriterator1.hasNext();)
            if(actoriterator1.next().isAlive())
                actoriterator1.current().die();

        SS5S.iterator();
        BreakoutGame.DoubleBallBonus.$5SS;
        JVM INSTR ifge 96;
           goto _L1 _L2
_L1:
        JVM INSTR pop ;
        break MISSING_BLOCK_LABEL_168;
_L3:
        throw ;
_L2:
        ActorArray.ActorIterator actoriterator2;
        actoriterator2;
        while(actoriterator2.hasNext()) 
            if(actoriterator2.next().isAlive())
                actoriterator2.current().die();
        S5$$.clear();
        II1l.clear();
        SS5S.clear();
        return;
        null;
          goto _L3
    }

    public synchronized void start()
    {
        Border border;
        Border border1;
        float f;
        long l2 = Ball.S$$;
        long l1 = Ball.S$$;
        l1 = Ball.S$$;
        long l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        f = 0.06071556F;
        Dimension dimension = MovingActor.isAlive(this);
        border = new Border(BonusActor.lll, BonusActor.lll, Block.llI, dimension.height);
        border1 = JVM INSTR new #265 <Class Border>;
        border1.Border((int)(((long)dimension.width & 0xffffffffL ^ l2 & 0xffffffff00000000L) & 0xffffffffL) - Block.llI, BonusActor.lll, Block.llI, (int)(((long)dimension.height & 0xffffffffL ^ l1 & 0xffffffff00000000L) & 0xffffffffL));
        Illll1.booleanValue();
        JVM INSTR ifge 136;
           goto _L1 _L2
_L1:
        break MISSING_BLOCK_LABEL_134;
_L2:
        break MISSING_BLOCK_LABEL_136;
        null;
        throw ;
        add(border);
        add(border1);
        if(l1lI != null)
            stop();
        resetOffScreen();
        update();
        l1lI = new AnimationThread();
        Ball.resetBallSpeed(f);
        ((DefaultStage) (l1lI)).SS5S;
        return;
    }

    public synchronized void stop()
    {
        if(l1lI == null) goto _L2; else goto _L1
_L1:
        this;
        BreakoutGame.LongBonus.$S5S.booleanValue();
        JVM INSTR ifge 22;
           goto _L3 _L4
_L3:
        JVM INSTR pop ;
        break MISSING_BLOCK_LABEL_37;
_L5:
        throw ;
_L4:
        l1lI;
        stopThread();
        l1lI = null;
_L2:
        return;
        null;
          goto _L5
    }

    private void resetOffScreen()
    {
        $$5$ = BouncingMovementCalculator.move(MovingActor.isAlive(this).width, MovingActor.isAlive(this).height, this);
        S$$5 = Paddle.isSticky($$5$);
    }

    private synchronized void update(Vector vector)
    {
        long l13 = Ball.S$$;
        long l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        long l11 = Ball.S$$;
        long l10 = Ball.S$$;
        long l9 = Ball.S$$;
        l9 = Ball.S$$;
        long l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        long l7 = Ball.S$$;
        l7 = Ball.S$$;
        l7 = Ball.S$$;
        long l6 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        long l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        long l4 = Ball.S$$;
        long l3 = Ball.S$$;
        long l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        long l1 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        long l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        if($$5$ == null)
            break MISSING_BLOCK_LABEL_1033;
        Graphics g = Border.collisionVector(this);
        vector = StraightLineMovementCalculator.determineCollision(vector);
        while((int)((l = (long)BouncingMovementCalculator.moveTemp(vector) & ImmortalBlock.III ^ l & -2L) & ImmortalBlock.III) != 0) 
        {
            Rectangle rectangle = (Rectangle)StraightLineMovementCalculator.move(vector);
            l12 = (long)rectangle.x & 0xffffffffL ^ l12 & 0xffffffff00000000L;
            if((int)(l12 & 0xffffffffL) < 0)
            {
                l8 = (long)rectangle.y << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l8 & 0xffffffffL;
                l10 = (long)rectangle.width & 0xffffffffL ^ l10 & 0xffffffff00000000L;
                l4 = (long)rectangle.height << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l4 & 0xffffffffL;
                rectangle = new Rectangle(BonusActor.lll, (int)((l8 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$), (int)(l10 & 0xffffffffL), (int)((l4 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$));
            }
            l5 = (long)rectangle.x & 0xffffffffL ^ l5 & 0xffffffff00000000L;
            l4 = (long)(rectangle.width + (int)(l5 & 0xffffffffL)) & 0xffffffffL ^ l4 & 0xffffffff00000000L;
            l8 = (long)rectangle.y & 0xffffffffL ^ l8 & 0xffffffff00000000L;
            l7 = (long)rectangle.x & 0xffffffffL ^ l7 & 0xffffffff00000000L;
            l13 = (long)rectangle.y & 0xffffffffL ^ l13 & 0xffffffff00000000L;
            l9 = (long)rectangle.x << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ ((long)((int)(l8 & 0xffffffffL) + (int)((l6 = (long)rectangle.height & 0xffffffffL ^ l6 & 0xffffffff00000000L) & 0xffffffffL)) & 0xffffffffL ^ l9 & 0xffffffff00000000L) & 0xffffffffL;
            l6 = (long)rectangle.width << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l6 & 0xffffffffL;
            l3 = (long)((int)((l9 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) + (int)((l6 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)) << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ ((long)rectangle.x & 0xffffffffL ^ l3 & 0xffffffff00000000L) & 0xffffffffL;
            l1 = (long)rectangle.y & 0xffffffffL ^ l1 & 0xffffffff00000000L;
            l2 = (long)rectangle.height & 0xffffffffL ^ l2 & 0xffffffff00000000L;
            l12 = (long)((int)(l1 & 0xffffffffL) + (int)(l2 & 0xffffffffL)) << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l12 & 0xffffffffL;
            BreakoutGame.blockDied($$5$, (int)(l3 & 0xffffffffL), rectangle.y, (int)(l4 & 0xffffffffL), (int)(l9 & 0xffffffffL), (int)(l7 & 0xffffffffL), (int)(l13 & 0xffffffffL), (int)((l3 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$), (int)((l12 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$), this, g);
        }
        ActorArray.ActorIterator.next(Color.white, g);
        for(l11 = (long)BonusActor.lll << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l11 & 0xffffffffL; (int)(((l11 = (long)IIIl.length & 0xffffffffL ^ l11 & 0xffffffff00000000L) & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) < (int)(l11 & 0xffffffffL); l11 = (long)(Block.llI + (int)((l11 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)) << BreakoutGame.DoubleBallBonus.$55$ ^ l11 & 0xffffffffL)
        {
            l = (long)IIIl[(int)((l11 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)] << Paddle.S5S & 0x7fff8L ^ l & 0xfffffffffff80007L;
            if((char)(int)((l & 0x7fff8L) >> Paddle.S5S) != 0)
                continue;
            FixedActor.isBackground(IIIl, BonusActor.lll, (int)((l11 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$), MovingResults.I1I1, BreakoutGame.NullBonus.IIlI, g);
            if(true)
                break MISSING_BLOCK_LABEL_1033;
        }

        if((byte)0x52985094 % Paddle.S5S == 0)
            break MISSING_BLOCK_LABEL_1033;
        null;
        throw ;
    }

    private void update()
    {
        if($$5$ == null) goto _L2; else goto _L1
_L1:
        Graphics g = Border.collisionVector(this);
        $$5$;
        BonusActor.lll;
        BonusActor.lll;
        BreakoutApplet.S$5$$S;
        JVM INSTR ifge 33;
           goto _L3 _L4
_L3:
        JVM INSTR pop ;
          goto _L5
_L6:
        throw ;
_L4:
        this;
        g;
        Paddle.fireGun();
        JVM INSTR pop ;
_L2:
        return;
_L5:
        JVM INSTR pop ;
        JVM INSTR pop ;
        null;
          goto _L6
    }

    public void paint(Graphics g)
    {
        this;
        BreakoutApplet.II1I.booleanValue();
        JVM INSTR ifge 15;
           goto _L1 _L2
_L1:
        JVM INSTR pop ;
        break MISSING_BLOCK_LABEL_41;
_L5:
        throw ;
_L2:
        $$5$;
        JVM INSTR ifnull 38;
           goto _L3 _L4
_L3:
        break MISSING_BLOCK_LABEL_21;
_L4:
        break MISSING_BLOCK_LABEL_37;
        Paddle.fireGun($$5$, BonusActor.lll, BonusActor.lll, this, g);
        return;
        null;
          goto _L5
    }

    public void addTickListener(TickListener ticklistener)
    {
        LevelConstructor.parseLevel(ticklistener, $S$$55);
    }

    public void removeTickListener(TickListener ticklistener)
    {
        DestroyerMovementCalculator.advanceToCollision(ticklistener, $S$$55);
    }

    private static int SS$5 = 10;
    private ActorArray S5$$;
    private ActorArray II1l;
    private ActorArray SS5S;
    public Vector $S$$55;
    private AnimationThread l1lI;
    private Image $$5$;
    private Graphics S$$5;
    char IIIl[];
    public static long $SS = 50L;
    public static float $55 = 0.05F;
    public static String $SS$ = "Error: invalid argument for try and split yDir:";
    public static Boolean Illll1 = new Boolean(true);
    public static boolean III1l;









}
