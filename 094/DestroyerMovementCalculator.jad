// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   DestroyerMovementCalculator.java

import java.awt.Rectangle;
import java.util.Vector;

public class DestroyerMovementCalculator extends BouncingMovementCalculator
{

    public DestroyerMovementCalculator()
    {
    }

    public static MovingResults advanceToCollision(MovingActor movingactor, Stage stage, Rectangle rectangle, int i, int j)
    {
        MovingResults movingresults;
        Rectangle rectangle1;
        long l;
        long l1;
        long l2;
        long l3;
        long l4;
        long l5;
        long l6;
        long l7;
        long l8;
        long l10;
        long l11;
        long l12;
        long l13;
        float f4 = 0.2034827F;
        float f2 = 0.03517497F;
        float f = 0.3615739F;
        l13 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l11 = Ball.S$$;
        l10 = Ball.S$$;
        l10 = Ball.S$$;
        long l9 = Ball.S$$;
        l9 = Ball.S$$;
        l9 = Ball.S$$;
        l9 = Ball.S$$;
        l9 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l7 = Ball.S$$;
        l7 = Ball.S$$;
        l7 = Ball.S$$;
        l7 = Ball.S$$;
        l7 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l4 = Ball.S$$;
        l4 = Ball.S$$;
        l4 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        l = Ball.S$$;
        movingresults = new MovingResults();
        rectangle1 = new Rectangle(rectangle);
        LevelConstructor.loadLevel(i, j, rectangle1);
        MovingResults.toString(rectangle, rectangle1, (BouncingMovementCalculator)null);
        l3 = (long)movingactor.collisionVector() << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l3 & 0xffffffffL;
        stage = stage.getIntersections(rectangle1, (int)((l3 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$));
        MovingResults.toString(rectangle, rectangle1);
        LevelConstructor.loadLevel(i, j, rectangle1);
        if((int)(((long)stage.length & 0xffffffffL ^ l9 & 0xffffffff00000000L) & 0xffffffffL) != 0)
        {
            l4 = (long)stage.length & 0xffffffffL ^ l4 & 0xffffffff00000000L;
            if((int)(l4 & 0xffffffffL) != Block.llI || stage[BonusActor.lll] != movingactor)
                break MISSING_BLOCK_LABEL_423;
        }
        movingresults.l11Il = rectangle1;
        movingresults.I11ll = BonusActor.lll;
        return movingresults;
        if(i > 0)
            l4 = (long)i << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l4 & 0xffffffffL;
        else
            l4 = (long)(-i) << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l4 & 0xffffffffL;
        l12 = (long)(int)((l4 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) & 0xffffffffL ^ l12 & 0xffffffff00000000L;
        if(j > 0)
            l2 = (long)j & 0xffffffffL ^ l2 & 0xffffffff00000000L;
        else
            l2 = (long)(-j) & 0xffffffffL ^ l2 & 0xffffffff00000000L;
        l = (long)(int)(l2 & 0xffffffffL) << MovingResults.I1I1 & 0xffffffff00000L ^ l & 0xfff00000000fffffL;
        if((int)(l12 & 0xffffffffL) <= (int)((l & 0xffffffff00000L) >> MovingResults.I1I1)) goto _L2; else goto _L1
_L1:
        float f1;
        float f3;
        float f5;
        if(i > 0)
            l = (long)Block.llI << 11 & 0x7f800L ^ l & 0xfffffffffff807ffL;
        else
            l = (long)Block.SSSS << 11 & 0x7f800L ^ l & 0xfffffffffff807ffL;
        f1 = (byte)(int)((l & 0x7f800L) >> 11);
        f3 = (float)j / (float)(int)(l12 & 0xffffffffL);
        f5 = (int)(l12 & 0xffffffffL);
          goto _L3
_L2:
        if(j > 0)
            l = (long)Block.llI & 255L ^ l & -256L;
        else
            l = (long)Block.SSSS & 255L ^ l & -256L;
        f3 = (byte)(int)(l & 255L);
        (float)i;
        (float)(int)((l & 0xffffffff00000L) >> MovingResults.I1I1);
        if((byte)0x537a4112 % 9 == 0) goto _L5; else goto _L4
_L4:
        JVM INSTR pop ;
        JVM INSTR pop ;
        break MISSING_BLOCK_LABEL_1475;
_L6:
        throw ;
_L5:
        JVM INSTR fdiv ;
        f1;
        f5 = (int)((l & 0xffffffff00000L) >> MovingResults.I1I1);
_L3:
        j = DefaultStage.AnimationThread.IIl1;
        i = DefaultStage.AnimationThread.IIl1;
        for(l10 = (long)BonusActor.lll & 0xffffffffL ^ l10 & 0xffffffff00000000L; (byte)(int)((l1 = (long)((float)(int)(l10 & 0xffffffffL) != f5) & 255L ^ l1 & -256L) & 255L) <= 0; l10 = (long)(Block.llI + (int)(l10 & 0xffffffffL)) ^ l10 & 0xffffffff00000000L)
        {
            l13 = (long)rectangle.x << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l13 & 0xffffffffL;
            l3 = (long)rectangle.y & 0xffffffffL ^ l3 & 0xffffffff00000000L;
            moveTemp((int)((l13 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$), (int)(l3 & 0xffffffffL), rectangle1);
            l13 = (long)(int)j & 0xffffffffL ^ l13 & 0xffffffff00000000L;
            l11 = (long)(int)i & 0xffffffffL ^ l11 & 0xffffffff00000000L;
            LevelConstructor.loadLevel((int)(l13 & 0xffffffffL), (int)(l11 & 0xffffffffL), rectangle1);
            for(l5 = (long)BonusActor.lll << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l5 & 0xffffffffL; (int)(((l5 = (long)stage.length & 0xffffffffL ^ l5 & 0xffffffff00000000L) & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) < (int)(l5 & 0xffffffffL); l5 = (long)(Block.llI + (int)((l5 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)) << BreakoutGame.DoubleBallBonus.$55$ ^ l5 & 0xffffffffL)
            {
                l = (long)StraightLineMovementCalculator.touch(stage[(int)((l5 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)].getBounds(), rectangle1) << 60 & 0x1000000000000000L ^ l & 0xefffffffffffffffL;
                if((int)((l & 0x1000000000000000L) >> 60) != 0 && stage[(int)((l5 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)] != movingactor)
                {
                    l = (long)(stage[(int)((l5 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)] instanceof ImmortalBlock) << 61 & 0x2000000000000000L ^ ((long)(stage[(int)((l5 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)] instanceof Block) << 55 & 0x80000000000000L ^ l & 0xff7fffffffffffffL) & 0xdfffffffffffffffL;
                    l = (long)((int)((l & 0x80000000000000L) >> 55) | (int)((l & 0x2000000000000000L) >> 61)) << 56 & 0x100000000000000L ^ l & 0xfeffffffffffffffL;
                    if((int)((l & 0x100000000000000L) >> 56) != 0)
                    {
                        stage[(int)((l5 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)].die();
                    } else
                    {
                        movingactor.setBounds(rectangle1);
                        stage[(int)((l5 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)].hit(movingactor);
                        l6 = (long)movingresults.I11ll & 0xffffffffL ^ l6 & 0xffffffff00000000L;
                        l7 = (long)StraightLineMovementCalculator.determineCollision(stage[(int)((l5 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)].getBounds(), rectangle1) & 0xffffffffL ^ l7 & 0xffffffff00000000L;
                        l8 = (long)((int)(l6 & 0xffffffffL) | (int)(l7 & 0xffffffffL)) & 0xffffffffL ^ l8 & 0xffffffff00000000L;
                        movingresults.I11ll = (int)(l8 & 0xffffffffL);
                    }
                }
            }

            if(movingresults.I11ll != 0)
            {
                movingresults.l11Il = rectangle1;
                return movingresults;
            }
            j += f1;
            i += f3;
        }

        movingresults.l11Il = rectangle1;
        movingresults.I11ll = BonusActor.lll;
        return movingresults;
        null;
          goto _L6
    }

    protected MovingResults moveTemp(Stage stage, MovingActor movingactor, Rectangle rectangle, int i, int j)
    {
        return advanceToCollision(movingactor, stage, rectangle, i, j);
    }

    public static boolean advanceToCollision(Object obj, Vector vector)
    {
        return vector.removeElement(obj);
    }

    public static void moveTemp(int i, int j, Rectangle rectangle)
    {
        rectangle.setLocation(i, j);
    }

    public static long ___ = 15L;
    public static float $S55$ = -5.2F;
    public static String Il1 = "->";
    public static String _____ = "Test ";
    public static String II11II = "collision:";
    public static boolean $5$$$ = true;
    public static Boolean II11ll = new Boolean(false);

}
