// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   ImageMovingActor.java

import java.awt.*;
import java.awt.image.ImageObserver;

public class ImageMovingActor extends MovingActor
{

    public ImageMovingActor(Stage stage, Image image, ImageObserver imageobserver, int i, int j)
    {
        super(stage, i, j, Block.hit(imageobserver, image), ActorArray.main(imageobserver, image));
        Illll = imageobserver;
        llI1I = image;
    }

    public void draw(Graphics g)
    {
        Paddle.fireGun(llI1I, super.S$S$$$.x, super.S$S$$$.y, Illll, g);
    }

    public void setImage(Image image)
    {
        int i;
        long l1;
        long l2;
        long l4;
        long l6;
        long l8;
        long l9;
        long l13;
        long l14 = Ball.S$$;
        l13 = Ball.S$$;
        l13 = Ball.S$$;
        l13 = Ball.S$$;
        l13 = Ball.S$$;
        l13 = Ball.S$$;
        l13 = Ball.S$$;
        l13 = Ball.S$$;
        l13 = Ball.S$$;
        long l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        long l11 = Ball.S$$;
        long l10 = Ball.S$$;
        l10 = Ball.S$$;
        l10 = Ball.S$$;
        l10 = Ball.S$$;
        l9 = Ball.S$$;
        l9 = Ball.S$$;
        l9 = Ball.S$$;
        l9 = Ball.S$$;
        l9 = Ball.S$$;
        l9 = Ball.S$$;
        l9 = Ball.S$$;
        l9 = Ball.S$$;
        l9 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        long l7 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        long l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l4 = Ball.S$$;
        long l3 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        long l = Ball.S$$;
        llI1I = image;
        i = ActorArray.main(Illll, image);
        l8 = (long)Block.hit(Illll, image) & 0xffffffffL ^ l8 & 0xffffffff00000000L;
        image = super.S$5$.getStageBounds();
        l4 = (long)((int)(((long)(int)center() & 0xffffffffL ^ l7 & 0xffffffff00000000L) & 0xffffffffL) - (int)(((long)((int)(l8 & 0xffffffffL) >> 161) & 0xffffffffL ^ l5 & 0xffffffff00000000L) & 0xffffffffL)) & 0xffffffffL ^ l4 & 0xffffffff00000000L;
        l9 = (long)super.S$S$$$.y & 0xffffffffL ^ l9 & 0xffffffff00000000L;
        l1 = (long)((int)(l4 & 0xffffffffL) + (int)(l8 & 0xffffffffL)) & 0xffffffffL ^ l1 & 0xffffffff00000000L;
        if((int)(l1 & 0xffffffffL) >= (int)(((long)((int)(((long)((Rectangle) (image)).x & 0xffffffffL ^ l14 & 0xffffffff00000000L) & 0xffffffffL) + (int)((l10 = (long)((Rectangle) (image)).width & 0xffffffffL ^ l10 & 0xffffffff00000000L) & 0xffffffffL)) & 0xffffffffL ^ l3 & 0xffffffff00000000L) & 0xffffffffL))
            l4 = (long)((int)((((long)(((int)(((long)((Rectangle) (image)).x & 0xffffffffL ^ l12 & 0xffffffff00000000L) & 0xffffffffL) + (int)(((long)((Rectangle) (image)).width & 0xffffffffL ^ l11 & 0xffffffff00000000L) & 0xffffffffL)) - (int)(l8 & 0xffffffffL)) << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l10 & 0xffffffffL) & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) - Block.llI) & 0xffffffffL ^ l4 & 0xffffffff00000000L;
        if((int)(l4 & 0xffffffffL) < (int)(((long)((Rectangle) (image)).x & 0xffffffffL ^ l2 & 0xffffffff00000000L) & 0xffffffffL))
            l4 = (long)Block.llI & 0xffffffffL ^ l4 & 0xffffffff00000000L;
        super.S$5$;
        if((byte)0x3aac3a24 % 9 == 0) goto _L2; else goto _L1
_L1:
        JVM INSTR pop ;
        break MISSING_BLOCK_LABEL_848;
_L3:
        throw ;
_L2:
        new Rectangle((int)(l4 & 0xffffffffL), (int)(l9 & 0xffffffffL), (int)(l8 & 0xffffffffL), i);
        (int)(((long)collisionVector() & 0xffffffffL ^ l6 & 0xffffffff00000000L) & 0xffffffffL);
        getIntersections();
        image;
        for(l13 = (long)BonusActor.lll & 0xffffffffL ^ l13 & 0xffffffff00000000L; (int)(l13 & 0xffffffffL) < (int)(((l1 = (long)image.length << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l1 & 0xffffffffL) & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$); l13 = (long)(Block.llI + (int)(l13 & 0xffffffffL)) ^ l13 & 0xffffffff00000000L)
            if(image[(int)(l13 & 0xffffffffL)] != this)
                image[(int)(l13 & 0xffffffffL)].die();

        setBounds((int)(l4 & 0xffffffffL), (int)(l9 & 0xffffffffL), (int)(l8 & 0xffffffffL), i);
        return;
        null;
          goto _L3
    }

    public static StringBuffer draw(char c, StringBuffer stringbuffer)
    {
        return stringbuffer.append(c);
    }

    public static Component draw(Component component, Container container)
    {
        return container.add(component);
    }

    public static void draw(Frame frame)
    {
        frame.removeNotify();
    }

    public static StringBuffer draw(int i, StringBuffer stringbuffer)
    {
        return stringbuffer.append(i);
    }

    Image llI1I;
    ImageObserver Illll;
    public static double ll1 = 0.5D;
    public static float $5S5 = 1.0F;
    public static String llII1 = "failed";
    public static String S55 = "Bonus: ";
    public static Boolean $55$S$ = new Boolean(true);
    public static boolean S$S5S5;

}
