// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   StraightLineMovementCalculator.java

import java.awt.Rectangle;
import java.util.Enumeration;
import java.util.Vector;

public class StraightLineMovementCalculator
    implements MovementCalculator
{

    public StraightLineMovementCalculator()
    {
    }

    public static void main(String args[])
    {
        long l = Ball.S$$;
        args = new Rectangle(BonusActor.lll, BonusActor.lll, BreakoutGame.DestroyerBonus.IlI, BreakoutGame.DestroyerBonus.IlI);
        Rectangle rectangle = new Rectangle(Paddle.S5S, BreakoutGame.DestroyerBonus.IlI, BreakoutGame.DestroyerBonus.IlI, BreakoutGame.DestroyerBonus.IlI);
        Rectangle rectangle1 = new Rectangle(BreakoutGame.DestroyerBonus.IlI, BonusActor.lll, BreakoutGame.DestroyerBonus.IlI, BreakoutGame.DestroyerBonus.IlI);
        java.io.PrintStream printstream = System.out;
        MovingResults.toString((int)(((long)determineCollision(args, new Rectangle(BreakoutGame.DestroyerBonus.IlI, BreakoutGame.DestroyerBonus.IlI, BreakoutGame.DestroyerBonus.IlI, BreakoutGame.DestroyerBonus.IlI)) & 0xffffffffL ^ l & 0xffffffff00000000L) & 0xffffffffL), printstream);
        printstream = System.out;
        MovingResults.toString(determineCollision(args, rectangle), printstream);
        printstream = System.out;
        MovingResults.toString(determineCollision(args, rectangle1), printstream);
    }

    public static final int determineCollision(Rectangle rectangle, Rectangle rectangle1)
    {
        long l1;
        long l2;
        long l3;
        long l4;
        long l5;
        long l6;
        long l7;
        long l8;
        long l9;
        long l10;
        long l11;
        long l12;
        long l13;
        long l14;
        long l15;
        long l16;
        long l17;
        long l18;
        long l19;
        long l20;
        long l21;
        long l22;
        long l23;
        long l24;
        long l25;
        long l26;
        long l27;
        long l28;
        long l29;
        long l30;
        long l31;
        long l32;
        long l33;
        long l34;
        l34 = Ball.S$$;
        l33 = Ball.S$$;
        l33 = Ball.S$$;
        l32 = Ball.S$$;
        l31 = Ball.S$$;
        l31 = Ball.S$$;
        l31 = Ball.S$$;
        l31 = Ball.S$$;
        l30 = Ball.S$$;
        l29 = Ball.S$$;
        l29 = Ball.S$$;
        l28 = Ball.S$$;
        l28 = Ball.S$$;
        l28 = Ball.S$$;
        l28 = Ball.S$$;
        l27 = Ball.S$$;
        l27 = Ball.S$$;
        l27 = Ball.S$$;
        l27 = Ball.S$$;
        l27 = Ball.S$$;
        l27 = Ball.S$$;
        l27 = Ball.S$$;
        l27 = Ball.S$$;
        l27 = Ball.S$$;
        l26 = Ball.S$$;
        l26 = Ball.S$$;
        l26 = Ball.S$$;
        l26 = Ball.S$$;
        l25 = Ball.S$$;
        l25 = Ball.S$$;
        l25 = Ball.S$$;
        l25 = Ball.S$$;
        l25 = Ball.S$$;
        l25 = Ball.S$$;
        l25 = Ball.S$$;
        l25 = Ball.S$$;
        l25 = Ball.S$$;
        l25 = Ball.S$$;
        l25 = Ball.S$$;
        l24 = Ball.S$$;
        l24 = Ball.S$$;
        l24 = Ball.S$$;
        l24 = Ball.S$$;
        l24 = Ball.S$$;
        l24 = Ball.S$$;
        l24 = Ball.S$$;
        l23 = Ball.S$$;
        l23 = Ball.S$$;
        l23 = Ball.S$$;
        l22 = Ball.S$$;
        l22 = Ball.S$$;
        l22 = Ball.S$$;
        l22 = Ball.S$$;
        l22 = Ball.S$$;
        l22 = Ball.S$$;
        l22 = Ball.S$$;
        l22 = Ball.S$$;
        l22 = Ball.S$$;
        l22 = Ball.S$$;
        l22 = Ball.S$$;
        l21 = Ball.S$$;
        l21 = Ball.S$$;
        l20 = Ball.S$$;
        l19 = Ball.S$$;
        l18 = Ball.S$$;
        l18 = Ball.S$$;
        l18 = Ball.S$$;
        l18 = Ball.S$$;
        l18 = Ball.S$$;
        l18 = Ball.S$$;
        l18 = Ball.S$$;
        l18 = Ball.S$$;
        l18 = Ball.S$$;
        l18 = Ball.S$$;
        l17 = Ball.S$$;
        l16 = Ball.S$$;
        l16 = Ball.S$$;
        l16 = Ball.S$$;
        l16 = Ball.S$$;
        l16 = Ball.S$$;
        l16 = Ball.S$$;
        l15 = Ball.S$$;
        l15 = Ball.S$$;
        l15 = Ball.S$$;
        l15 = Ball.S$$;
        l15 = Ball.S$$;
        l15 = Ball.S$$;
        l15 = Ball.S$$;
        l14 = Ball.S$$;
        l14 = Ball.S$$;
        l14 = Ball.S$$;
        l14 = Ball.S$$;
        l14 = Ball.S$$;
        l14 = Ball.S$$;
        l13 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l11 = Ball.S$$;
        l11 = Ball.S$$;
        l10 = Ball.S$$;
        l10 = Ball.S$$;
        l10 = Ball.S$$;
        l10 = Ball.S$$;
        l10 = Ball.S$$;
        l9 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l7 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l4 = Ball.S$$;
        l4 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l1 = Ball.S$$;
        long l = Ball.S$$;
        l = Ball.S$$;
        l = Ball.S$$;
        if((int)(((long)ImageFixedActor.draw(rectangle1, rectangle) & ImmortalBlock.III ^ l & -2L) & ImmortalBlock.III) != 0)
            return BreakoutGame.LifeBonus.S55$;
        l31 = (long)BonusActor.lll << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l31 & 0xffffffffL;
        l27 = (long)rectangle.y & 0xffffffffL ^ l27 & 0xffffffff00000000L;
        l16 = (long)rectangle1.y << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l16 & 0xffffffffL;
        if((int)(l27 & 0xffffffffL) == (int)(((long)((int)((l16 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) + (int)(((long)rectangle1.height & 0xffffffffL ^ l20 & 0xffffffff00000000L) & 0xffffffffL)) & 0xffffffffL ^ l5 & 0xffffffff00000000L) & 0xffffffffL)) goto _L2; else goto _L1
_L1:
        int i;
        i = rectangle1.y;
        l14 = (long)rectangle.height & 0xffffffffL ^ l14 & 0xffffffff00000000L;
        (int)(((long)rectangle.y & 0xffffffffL ^ l26 & 0xffffffff00000000L) & 0xffffffffL);
        BreakoutGame.TripleBonus.lI1l;
        JVM INSTR ifge 946;
           goto _L3 _L4
_L3:
        JVM INSTR pop ;
        break MISSING_BLOCK_LABEL_2205;
_L9:
        throw ;
_L4:
        (int)(l14 & 0xffffffffL);
        JVM INSTR iadd ;
        (long);
        0xffffffffL;
        JVM INSTR land ;
        l3 & 0xffffffff00000000L;
        JVM INSTR lxor ;
        l3;
        if(i != (int)(l3 & 0xffffffffL)) goto _L5; else goto _L2
_L2:
        l18 = (long)rectangle.x & 0xffffffffL ^ l18 & 0xffffffff00000000L;
        l11 = (long)((int)(l18 & 0xffffffffL) + (int)(((long)((int)(((long)rectangle.width & 0xffffffffL ^ l22 & 0xffffffff00000000L) & 0xffffffffL) >> Block.llI) & 0xffffffffL ^ l24 & 0xffffffff00000000L) & 0xffffffffL)) << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l11 & 0xffffffffL;
        l9 = (long)rectangle1.x << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l9 & 0xffffffffL;
        l1 = (long)rectangle1.width << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l1 & 0xffffffffL;
        l34 = (long)((int)((l1 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) >> Block.llI) << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l34 & 0xffffffffL;
        l33 = (long)((int)((l9 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) + (int)((l34 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)) & 0xffffffffL ^ l33 & 0xffffffff00000000L;
        l31 = (long)((int)(((long)rectangle1.x & 0xffffffffL ^ l30 & 0xffffffff00000000L) & 0xffffffffL) + (int)(((long)rectangle1.width & 0xffffffffL ^ l6 & 0xffffffff00000000L) & 0xffffffffL)) & 0xffffffffL ^ ((long)(BreakoutGame.S$55 + (int)((l31 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)) << BreakoutGame.DoubleBallBonus.$55$ ^ l31 & 0xffffffffL) & 0xffffffff00000000L;
        if((int)((l11 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) > (int)(l31 & 0xffffffffL)) goto _L7; else goto _L6
_L6:
        l25 = (long)rectangle1.x & 0xffffffffL ^ l25 & 0xffffffff00000000L;
        if((int)((l11 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) < (int)(l25 & 0xffffffffL)) goto _L7; else goto _L8
_L8:
        l31 = (long)(BreakoutGame.TripleBonus.l1l1 + (int)((l31 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)) << BreakoutGame.DoubleBallBonus.$55$ ^ l31 & 0xffffffffL;
          goto _L5
_L7:
        if((int)(l33 & 0xffffffffL) <= (int)(((long)((int)(((long)rectangle.x & 0xffffffffL ^ l1 & 0xffffffff00000000L) & 0xffffffffL) + (int)(((l8 = (long)rectangle.width << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l8 & 0xffffffffL) & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)) & 0xffffffffL ^ l34 & 0xffffffff00000000L) & 0xffffffffL))
        {
            l28 = (long)rectangle.x << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l28 & 0xffffffffL;
            if((int)(l33 & 0xffffffffL) >= (int)((l28 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$))
                l31 = (long)(BreakoutGame.TripleBonus.l1l1 + (int)((l31 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)) << BreakoutGame.DoubleBallBonus.$55$ ^ l31 & 0xffffffffL;
        }
_L5:
        if((int)(((long)rectangle.x & 0xffffffffL ^ l23 & 0xffffffff00000000L) & 0xffffffffL) == (int)(((long)((int)(((long)rectangle1.x & 0xffffffffL ^ l12 & 0xffffffff00000000L) & 0xffffffffL) + (int)(((long)rectangle1.width & 0xffffffffL ^ l11 & 0xffffffff00000000L) & 0xffffffffL)) & 0xffffffffL ^ l7 & 0xffffffff00000000L) & 0xffffffffL) || (int)(((long)rectangle1.x & 0xffffffffL ^ l17 & 0xffffffff00000000L) & 0xffffffffL) == (int)((((long)((int)(((long)rectangle.x & 0xffffffffL ^ l28 & 0xffffffff00000000L) & 0xffffffffL) + (int)((l4 = (long)rectangle.width & 0xffffffffL ^ l4 & 0xffffffff00000000L) & 0xffffffffL)) << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l4 & 0xffffffffL) & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$))
        {
            l31 = (long)(Block.llI + (int)((l31 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)) << BreakoutGame.DoubleBallBonus.$55$ ^ l31 & 0xffffffffL;
            l2 = (long)rectangle.height & 0xffffffffL ^ l2 & 0xffffffff00000000L;
            l8 = (long)((int)(((long)rectangle.y & 0xffffffffL ^ l19 & 0xffffffff00000000L) & 0xffffffffL) + (int)(((long)((int)(l2 & 0xffffffffL) >> Block.llI) & 0xffffffffL ^ l13 & 0xffffffff00000000L) & 0xffffffffL)) & 0xffffffffL ^ l8 & 0xffffffff00000000L;
            l16 = (long)((int)(((long)rectangle1.y & 0xffffffffL ^ l29 & 0xffffffff00000000L) & 0xffffffffL) + (int)(((long)((int)((((long)rectangle1.height << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l25 & 0xffffffffL) & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) >> Block.llI) & 0xffffffffL ^ l10 & 0xffffffff00000000L) & 0xffffffffL)) & 0xffffffffL ^ l16 & 0xffffffff00000000L;
            if((int)(l8 & 0xffffffffL) <= (int)(((long)((int)(((long)rectangle1.y & 0xffffffffL ^ l32 & 0xffffffff00000000L) & 0xffffffffL) + (int)(((long)rectangle1.height & 0xffffffffL ^ l21 & 0xffffffff00000000L) & 0xffffffffL)) & 0xffffffffL ^ l15 & 0xffffffff00000000L) & 0xffffffffL) && (int)(l8 & 0xffffffffL) >= (int)((((long)rectangle1.y << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l27 & 0xffffffffL) & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$))
                l31 = (long)(BreakoutGame.TripleBonus.l1l1 + (int)((l31 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)) << BreakoutGame.DoubleBallBonus.$55$ ^ l31 & 0xffffffffL;
            else
            if((int)(l16 & 0xffffffffL) <= (int)((((long)((int)(((long)rectangle.y & 0xffffffffL ^ l9 & 0xffffffff00000000L) & 0xffffffffL) + rectangle.height) << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l18 & 0xffffffffL) & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) && (int)(l16 & 0xffffffffL) >= (int)((((long)rectangle.y << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l2 & 0xffffffffL) & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$))
                l31 = (long)(BreakoutGame.TripleBonus.l1l1 + (int)((l31 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)) << BreakoutGame.DoubleBallBonus.$55$ ^ l31 & 0xffffffffL;
        }
        return (int)((l31 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$);
        null;
          goto _L9
    }

    public static final boolean touch(Rectangle rectangle, Rectangle rectangle1)
    {
        long l1;
        long l2;
        long l3;
        long l4;
        long l5;
        long l6;
        long l7;
        long l8;
        long l9;
        long l10;
        long l11;
        long l12;
        long l13;
        long l14;
        long l15;
        long l16;
        long l17;
        l17 = Ball.S$$;
        l16 = Ball.S$$;
        l15 = Ball.S$$;
        l15 = Ball.S$$;
        l15 = Ball.S$$;
        l15 = Ball.S$$;
        l15 = Ball.S$$;
        l15 = Ball.S$$;
        l15 = Ball.S$$;
        l15 = Ball.S$$;
        l15 = Ball.S$$;
        l14 = Ball.S$$;
        l14 = Ball.S$$;
        l14 = Ball.S$$;
        l14 = Ball.S$$;
        l14 = Ball.S$$;
        l13 = Ball.S$$;
        l13 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l11 = Ball.S$$;
        l11 = Ball.S$$;
        l11 = Ball.S$$;
        l10 = Ball.S$$;
        l10 = Ball.S$$;
        l10 = Ball.S$$;
        l9 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l7 = Ball.S$$;
        l7 = Ball.S$$;
        l7 = Ball.S$$;
        l7 = Ball.S$$;
        l7 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l5 = Ball.S$$;
        l4 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        l1 = Ball.S$$;
        long l = Ball.S$$;
        l = Ball.S$$;
        if((int)(((long)rectangle.x & 0xffffffffL ^ Ball.S$$ & 0xffffffff00000000L) & 0xffffffffL) >= (int)(((long)rectangle1.x & 0xffffffffL ^ Ball.S$$ & 0xffffffff00000000L) & 0xffffffffL) && (int)(((long)rectangle.x & 0xffffffffL ^ l3 & 0xffffffff00000000L) & 0xffffffffL) <= (int)(((long)((int)(((long)rectangle1.x & 0xffffffffL ^ l7 & 0xffffffff00000000L) & 0xffffffffL) + (int)(((l10 = (long)rectangle1.width << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l10 & 0xffffffffL) & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$)) & 0xffffffffL ^ l13 & 0xffffffff00000000L) & 0xffffffffL)) goto _L2; else goto _L1
_L1:
        l1 = (long)rectangle1.x & 0xffffffffL ^ l1 & 0xffffffff00000000L;
        if((int)(l1 & 0xffffffffL) < rectangle.x || (int)(((long)rectangle1.x & 0xffffffffL ^ l14 & 0xffffffff00000000L) & 0xffffffffL) > (int)(((long)((int)(((long)rectangle.x & 0xffffffffL ^ l5 & 0xffffffff00000000L) & 0xffffffffL) + (int)(((long)rectangle.width & 0xffffffffL ^ l6 & 0xffffffff00000000L) & 0xffffffffL)) & 0xffffffffL ^ l16 & 0xffffffff00000000L) & 0xffffffffL)) goto _L3; else goto _L2
_L2:
        if((int)(((long)rectangle.y & 0xffffffffL ^ l10 & 0xffffffff00000000L) & 0xffffffffL) < (int)(((long)rectangle1.y & 0xffffffffL ^ l2 & 0xffffffff00000000L) & 0xffffffffL)) goto _L5; else goto _L4
_L4:
        l17 = (long)rectangle.y & 0xffffffffL ^ l17 & 0xffffffff00000000L;
        rectangle1.y;
        ActorArray.ActorIterator.SS5S$5;
        JVM INSTR ifge 745;
           goto _L6 _L7
_L6:
        JVM INSTR pop ;
        break MISSING_BLOCK_LABEL_979;
_L9:
        throw ;
_L7:
        (long);
        0xffffffffL;
        JVM INSTR land ;
        l8 & 0xffffffff00000000L;
        JVM INSTR lxor ;
        0xffffffffL;
        JVM INSTR land ;
        (int);
        (int)((((long)rectangle1.height << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l1 & 0xffffffffL) & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$);
        JVM INSTR iadd ;
        (long);
        0xffffffffL;
        JVM INSTR land ;
        l12 & 0xffffffff00000000L;
        JVM INSTR lxor ;
        l12;
        if((int)(l17 & 0xffffffffL) <= (int)(l12 & 0xffffffffL)) goto _L8; else goto _L5
_L5:
        l15 = (long)rectangle1.y << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l15 & 0xffffffffL;
        if((int)((l15 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$) < (int)(((long)rectangle.y & 0xffffffffL ^ l11 & 0xffffffff00000000L) & 0xffffffffL) || (int)(((long)rectangle1.y & 0xffffffffL ^ l4 & 0xffffffff00000000L) & 0xffffffffL) > (int)(((long)rectangle.y & 0xffffffffL ^ l15 & 0xffffffff00000000L) & 0xffffffffL) + (int)(((long)rectangle.height & 0xffffffffL ^ l9 & 0xffffffff00000000L) & 0xffffffffL)) goto _L3; else goto _L8
_L8:
        return Block.llI;
_L3:
        return BonusActor.lll;
        null;
          goto _L9
    }

    public static final MovingResults advanceToCollision(MovingActor movingactor, Stage stage, Rectangle rectangle, int i, int j)
    {
        MovingResults movingresults;
        Rectangle rectangle1;
        BouncingMovementCalculator bouncingmovementcalculator;
        long l;
        long l1;
        long l2;
        long l3;
        long l4;
        long l5;
        long l6;
        long l7;
        long l8;
        long l9;
        long l10;
        long l11;
        long l12;
        long l13;
        long l14;
        long l15;
        long l16;
        long l17;
        long l18;
        long l19;
        float f = 0.3223295F;
        float f4 = 0.6901811F;
        float f2 = 0.4194365F;
        l19 = Ball.S$$;
        l18 = Ball.S$$;
        l18 = Ball.S$$;
        l17 = Ball.S$$;
        l16 = Ball.S$$;
        l16 = Ball.S$$;
        l16 = Ball.S$$;
        l15 = Ball.S$$;
        l14 = Ball.S$$;
        l14 = Ball.S$$;
        l13 = Ball.S$$;
        l13 = Ball.S$$;
        l13 = Ball.S$$;
        l13 = Ball.S$$;
        l13 = Ball.S$$;
        l13 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l12 = Ball.S$$;
        l11 = Ball.S$$;
        l11 = Ball.S$$;
        l11 = Ball.S$$;
        l11 = Ball.S$$;
        l10 = Ball.S$$;
        l10 = Ball.S$$;
        l10 = Ball.S$$;
        l10 = Ball.S$$;
        l10 = Ball.S$$;
        l10 = Ball.S$$;
        l9 = Ball.S$$;
        l9 = Ball.S$$;
        l8 = Ball.S$$;
        l8 = Ball.S$$;
        l7 = Ball.S$$;
        l7 = Ball.S$$;
        l6 = Ball.S$$;
        l6 = Ball.S$$;
        l5 = Ball.S$$;
        l4 = Ball.S$$;
        l4 = Ball.S$$;
        l4 = Ball.S$$;
        l4 = Ball.S$$;
        l4 = Ball.S$$;
        l4 = Ball.S$$;
        l4 = Ball.S$$;
        l4 = Ball.S$$;
        l4 = Ball.S$$;
        l3 = Ball.S$$;
        l3 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l2 = Ball.S$$;
        l1 = Ball.S$$;
        l = Ball.S$$;
        bouncingmovementcalculator = (BouncingMovementCalculator)null;
        movingresults = new MovingResults();
        rectangle1 = new Rectangle(rectangle);
        i;
        j;
        rectangle1;
        if((byte)0x516d22dc % Paddle.S5S == 0) goto _L2; else goto _L1
_L1:
        JVM INSTR pop ;
          goto _L3
_L4:
        throw ;
_L2:
        LevelConstructor.loadLevel();
        MovingResults.toString(rectangle, rectangle1, bouncingmovementcalculator);
        stage = stage.getIntersections(rectangle1, (int)(((long)movingactor.collisionVector() & 0xffffffffL ^ l5 & 0xffffffff00000000L) & 0xffffffffL));
        MovingResults.toString(rectangle, rectangle1);
        LevelConstructor.loadLevel(i, j, rectangle1);
        if((int)(((long)stage.length & 0xffffffffL ^ l15 & 0xffffffff00000000L) & 0xffffffffL) != 0 && ((int)(((long)stage.length & 0xffffffffL ^ l11 & 0xffffffff00000000L) & 0xffffffffL) != Block.llI || stage[BonusActor.lll] != movingactor))
            break MISSING_BLOCK_LABEL_474;
        movingresults.l11Il = rectangle1;
        movingresults.I11ll = BonusActor.lll;
        return movingresults;
        if(i > 0)
            l4 = (long)i & 0xffffffffL ^ l4 & 0xffffffff00000000L;
        else
            l4 = (long)(-i) & 0xffffffffL ^ l4 & 0xffffffff00000000L;
        l7 = (long)(int)(l4 & 0xffffffffL) & 0xffffffffL ^ l7 & 0xffffffff00000000L;
        if(j > 0)
            l18 = (long)j & 0xffffffffL ^ l18 & 0xffffffff00000000L;
        else
            l18 = (long)(-j) & 0xffffffffL ^ l18 & 0xffffffff00000000L;
        float f1 = (int)(l18 & 0xffffffffL);
        float f3;
        float f5;
        if((int)(l7 & 0xffffffffL) > f1)
        {
            if(i > 0)
                l = (long)Block.llI << 44 & 0xff00000000000L ^ l & 0xfff00fffffffffffL;
            else
                l = (long)Block.SSSS << 44 & 0xff00000000000L ^ l & 0xfff00fffffffffffL;
            f3 = (byte)(int)((l & 0xff00000000000L) >> 44);
            f5 = (float)j / (float)(int)(l7 & 0xffffffffL);
            f1 = (int)(l7 & 0xffffffffL);
        } else
        {
            if(j > 0)
                l1 = (long)Block.llI & 255L ^ l1 & -256L;
            else
                l1 = (long)Block.SSSS & 255L ^ l1 & -256L;
            f5 = (byte)(int)(l1 & 255L);
            f3 = (float)i / (float)f1;
            f1 = f1;
        }
        j = DefaultStage.AnimationThread.IIl1;
        i = DefaultStage.AnimationThread.IIl1;
        for(l12 = (long)BonusActor.lll & 0xffffffffL ^ l12 & 0xffffffff00000000L; (byte)(int)(((l = (long)((float)(int)(l12 & 0xffffffffL) != f1) << BreakoutGame.DoubleBallBonus.IIll & 0x7f800000000L ^ l & 0xfffff807ffffffffL) & 0x7f800000000L) >> BreakoutGame.DoubleBallBonus.IIll) <= 0; l12 = (long)(Block.llI + (int)(l12 & 0xffffffffL)) ^ l12 & 0xffffffff00000000L)
        {
            l9 = (long)rectangle.x & 0xffffffffL ^ l9 & 0xffffffff00000000L;
            l8 = (long)rectangle.y & 0xffffffffL ^ l8 & 0xffffffff00000000L;
            DestroyerMovementCalculator.moveTemp((int)(l9 & 0xffffffffL), (int)(l8 & 0xffffffffL), rectangle1);
            l10 = (long)(int)j & 0xffffffffL ^ l10 & 0xffffffff00000000L;
            l19 = (long)(int)i << BreakoutGame.DoubleBallBonus.$55$ & 0xffffffff00000000L ^ l19 & 0xffffffffL;
            LevelConstructor.loadLevel((int)(l10 & 0xffffffffL), (int)((l19 & 0xffffffff00000000L) >> BreakoutGame.DoubleBallBonus.$55$), rectangle1);
            l1I1.clear();
            for(l16 = (long)BonusActor.lll & 0xffffffffL ^ l16 & 0xffffffff00000000L; (int)(l16 & 0xffffffffL) < (int)((l3 = (long)stage.length & 0xffffffffL ^ l3 & 0xffffffff00000000L) & 0xffffffffL); l16 = (long)(Block.llI + (int)(l16 & 0xffffffffL)) ^ l16 & 0xffffffff00000000L)
            {
                Actor actor = stage[(int)(l16 & 0xffffffffL)];
                l = (long)touch(actor.getBounds(), rectangle1) << 63 & 0x8000000000000000L ^ l & 0x7fffffffffffffffL;
                if((int)((l & 0x8000000000000000L) >> 63) != 0 && actor != movingactor)
                {
                    l13 = (long)determineCollision(actor.getBounds(), rectangle1) & 0xffffffffL ^ l13 & 0xffffffff00000000L;
                    l = (long)movingresults.I11ll & 0xffffffffL ^ l & 0xffffffff00000000L;
                    l6 = (long)((int)(l & 0xffffffffL) & BreakoutGame.TripleBonus.l1l1) & 0xffffffffL ^ l6 & 0xffffffff00000000L;
                    if((int)(l6 & 0xffffffffL) != 0)
                        l = (long)Block.llI << 57 & 0x200000000000000L ^ l & 0xfdffffffffffffffL;
                    else
                        l = (long)BonusActor.lll << 57 & 0x200000000000000L ^ l & 0xfdffffffffffffffL;
                    l = (long)(int)((l & 0x200000000000000L) >> 57) << 60 & 0x1000000000000000L ^ l & 0xefffffffffffffffL;
                    l19 = (long)((int)(l13 & 0xffffffffL) & BreakoutGame.TripleBonus.l1l1) & 0xffffffffL ^ l19 & 0xffffffff00000000L;
                    if((int)(l19 & 0xffffffffL) != 0)
                        l1 = (long)Block.llI << 49 & 0x2000000000000L ^ l1 & 0xfffdffffffffffffL;
                    else
                        l1 = (long)BonusActor.lll << 49 & 0x2000000000000L ^ l1 & 0xfffdffffffffffffL;
                    l1 = (long)(int)((l1 & 0x2000000000000L) >> 49) << 46 & 0x400000000000L ^ l1 & 0xffffbfffffffffffL;
                    if((int)((l & 0x1000000000000000L) >> 60) != 0)
                        l = (long)BonusActor.lll << 61 & 0x2000000000000000L ^ l & 0xdfffffffffffffffL;
                    else
                        l = (long)Block.llI << 61 & 0x2000000000000000L ^ l & 0xdfffffffffffffffL;
                    l = (long)((int)((l1 & 0x400000000000L) >> 46) & (int)((l & 0x2000000000000000L) >> 61)) << 53 & 0x20000000000000L ^ l & 0xffdfffffffffffffL;
                    if((int)((l & 0x20000000000000L) >> 53) != 0)
                    {
                        movingresults.I11ll = (int)(l13 & 0xffffffffL);
                        l1I1.clear();
                        l1I1.add(actor);
                    } else
                    if((int)((l & 0x1000000000000000L) >> 60) == (int)((l1 & 0x400000000000L) >> 46))
                    {
                        l14 = (long)movingresults.I11ll & 0xffffffffL ^ l14 & 0xffffffff00000000L;
                        l17 = (long)((int)(l14 & 0xffffffffL) | (int)(l13 & 0xffffffffL)) & 0xffffffffL ^ l17 & 0xffffffff00000000L;
                        movingresults.I11ll = (int)(l17 & 0xffffffffL);
                        l1I1.add(actor);
                    }
                    movingactor.setBounds(rectangle1);
                }
            }

            for(l2 = (long)BonusActor.lll & 0xffffffffL ^ l2 & 0xffffffff00000000L; (int)(l2 & 0xffffffffL) < l1I1.size(); l2 = (long)(Block.llI + (int)(l2 & 0xffffffffL)) ^ l2 & 0xffffffff00000000L)
                l1I1.at((int)(l2 & 0xffffffffL)).hit(movingactor);

            l1 = (long)movingresults.I11ll << 11 & 0x7fffffff800L ^ l1 & 0xfffff800000007ffL;
            if((int)((l1 & 0x7fffffff800L) >> 11) != 0)
            {
                movingresults.l11Il = rectangle1;
                return movingresults;
            }
            j += f3;
            i += f5;
        }

        movingresults.l11Il = rectangle1;
        movingresults.I11ll = BonusActor.lll;
        return movingresults;
_L3:
        JVM INSTR pop ;
        JVM INSTR pop ;
        null;
          goto _L4
    }

    public MovingResults move(Stage stage, MovingActor movingactor, Rectangle rectangle, Rectangle rectangle1, int i, int j)
    {
        MovingResults movingresults = advanceToCollision(movingactor, stage, rectangle, i, j);
        movingresults.I11ll = BonusActor.lll;
        return movingresults;
    }

    public static Enumeration determineCollision(Vector vector)
    {
        return vector.elements();
    }

    public static Object move(Enumeration enumeration)
    {
        return enumeration.nextElement();
    }

    public static int move(StringBuffer stringbuffer)
    {
        return stringbuffer.length();
    }

    public static float main(float f)
    {
        return Math.abs(f);
    }

    private static final ActorArray l1I1 = new ActorArray();
    public static float $$$ = -0.2F;
    public static String I1I = "Long Paddle";
    public static String SS5 = "MovingActor current:";
    public static String S5$5 = "Lives Left:";
    public static int llIl = 39;
    public static int _______ = 370;
    public static int S5$ = 6;
    public static boolean IlIl1 = true;
    public static Boolean l111 = new Boolean(false);

}
